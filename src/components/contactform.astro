---
import Button from "./ui/button.astro";

// Get environment variables in the component script
const emailJsKey = import.meta.env.PUBLIC_EMAILJS_KEY;
const emailJsServiceId = import.meta.env.PUBLIC_EMAILJS_SERVICE_ID;
const emailJsTemplateId = import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID;
const turnstileKey = import.meta.env.PUBLIC_TURNSTILE_KEY;
---

 <form
 id="form"
 class="needs-validation"
 novalidate>
 <div class="mb-5">
   <label for="from_name" class="sr-only">Full Name</label>
   <input
     id="from_name"
     type="text"
     placeholder="Full Name"
     required
     class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
     name="from_name"
     aria-describedby="name-error"
   />
   <div id="name-error" class="empty-feedback invalid-feedback text-red-400 text-sm mt-1" aria-live="assertive">
     Please provide your full name.
   </div>
 </div>
 <div class="mb-5">
   <label for="email_address" class="sr-only">Email Address</label>
   <input
     id="email_address"
     type="email"
     placeholder="Email Address"
     name="reply_to"
     required
     class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
     aria-describedby="email-error"
   />
   <div id="email-error" class="empty-feedback invalid-feedback text-red-400 text-sm mt-1" aria-live="assertive">
     <span class="empty-feedback">Please provide your email address.</span>
     <span class="invalid-feedback">Please provide a valid email address.</span>
   </div>
 </div>
 <div class="mb-3">
   <label for="message" class="sr-only">Your Message</label>
   <textarea
     id="message"
     name="message"
     required
     placeholder="Your Message"
     class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none h-36 focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
     aria-describedby="message-error"
   ></textarea>
   <div id="message-error" class="empty-feedback invalid-feedback text-red-400 text-sm mt-1" aria-live="assertive">
     Please enter your message.
   </div>
 </div>
 
 <!-- Turnstile Widget -->
 <div class="mb-5">
   <div id="cf-turnstile" class="mb-3"></div>
 </div>

 <Button type="submit" size="lg" block>Send Message</Button>
 <div id="result" class="mt-3 text-center" role="alert" aria-live="polite"></div>
</form>

<style>
 .invalid-feedback,
 .empty-feedback {
   display: none;
 }
 .was-validated :placeholder-shown:invalid ~ .empty-feedback {
   display: block;
 }
 .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
   display: block;
 }
 .is-invalid,
 .was-validated :invalid {
   border-color: #dc3545;
 }
</style>

<!-- EmailJS SDK -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

<!-- Initialize EmailJS -->
<script is:inline define:vars={{ emailJsKey }}>
 (function() {
   emailjs.init(emailJsKey);
 })();
</script>

<!-- Turnstile -->
<script define:vars={{ turnstileKey }}>
  if (typeof window !== 'undefined') {
    window.onloadTurnstileCallback = function () {
      turnstile.render('#cf-turnstile', {
        sitekey: turnstileKey,
        callback: function(token) {
          console.log('Turnstile success:', token);
          window.turnstileToken = token;
        }
      });
    };
  }
</script>

<script async
  src="https://challenges.cloudflare.com/turnstile/v0/api.js?onload=onloadTurnstileCallback">
</script>

<script is:inline define:vars={{ emailJsKey, emailJsServiceId, emailJsTemplateId }}>
 let form = document.getElementById("form");
 let result = document.getElementById("result");

 form.addEventListener("submit", async function (e) {
   e.preventDefault();
   form.classList.add("was-validated");

   // Remove any existing error messages
   result.classList.remove("text-red-500", "text-green-500");
   result.innerHTML = "";

   if (!form.checkValidity()) {
     // Show the first validation error
     const firstInvalid = form.querySelectorAll(":invalid")[0];
     const invalidInput = firstInvalid.querySelector("input, textarea");
     (invalidInput || firstInvalid).focus();
     
     // Show error message
     const errorDiv = firstInvalid.querySelector(".invalid-feedback, .empty-feedback");
     if (errorDiv) {
       errorDiv.style.display = "block";
     }
     
     return;
   }

   if (!window.turnstileToken) {
     result.classList.add("text-red-500");
     result.innerHTML = "Please complete the captcha";
     return;
   }

   try {
     // Clear all error messages
     document.querySelectorAll(".invalid-feedback, .empty-feedback").forEach(el => {
       el.style.display = "none";
     });
     
     result.innerHTML = "Sending...";
     result.setAttribute("aria-busy", "true");

     const templateParams = {
       from_name: form.from_name.value,
       reply_to: form.reply_to.value,
       message: form.message.value,
      'cf-turnstile-response': window.turnstileToken
     };

     const response = await emailjs.send(
       emailJsServiceId,
       emailJsTemplateId,
       templateParams,
       emailJsKey
     );

     console.log('SUCCESS!', response.status, response.text);
     result.classList.remove("text-red-500");
     result.classList.add("text-green-500");
     result.innerHTML = "Message sent successfully!";
     
     // Reset form and captcha
     form.reset();
     form.classList.remove("was-validated");
     turnstile.reset();
     window.turnstileToken = null;

     // Clear success message after 5 seconds
     setTimeout(() => {
       result.style.display = "none";
     }, 5000);
     
     // Remove aria-busy attribute
     result.removeAttribute("aria-busy");

   } catch(error) {
     console.log('FAILED...', error);
     result.classList.add("text-red-500");
     result.innerHTML = "Failed to send: " + error.text;
     result.removeAttribute("aria-busy");
   }
 })
</script>
