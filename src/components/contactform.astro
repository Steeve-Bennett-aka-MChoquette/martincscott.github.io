---
import Button from "./ui/button.astro";

// Get environment variables in the component script with fallbacks
const emailJsKey = import.meta.env.PUBLIC_EMAILJS_KEY || 'placeholder-emailjs-key';
const emailJsServiceId = import.meta.env.PUBLIC_EMAILJS_SERVICE_ID || 'placeholder-service-id';
const emailJsTemplateId = import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID || 'placeholder-template-id';
const turnstileKey = import.meta.env.PUBLIC_TURNSTILE_KEY || 'placeholder-turnstile-key';

// Log warning if environment variables are missing (only during build)
if (import.meta.env.SSR && (!import.meta.env.PUBLIC_EMAILJS_KEY || !import.meta.env.PUBLIC_EMAILJS_SERVICE_ID || 
    !import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID || !import.meta.env.PUBLIC_TURNSTILE_KEY)) {
  console.warn('Warning: Some contact form environment variables are missing. Form functionality may be limited.');
}
---

 <form
 id="form"
 class="needs-validation"
 novalidate>
 <div class="mb-5">
   <label for="from_name" class="sr-only">Full Name</label>
   <input
     id="from_name"
     type="text"
     placeholder="Full Name"
     required
     class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
     name="from_name"
     aria-describedby="name-error"
   />
<div id="name-error" class="empty-feedback invalid-feedback text-red-500 text-sm mt-1" aria-live="assertive">
     Please provide your full name.
   </div>
 </div>
 <div class="mb-5">
   <label for="email_address" class="sr-only">Email Address</label>
   <input
     id="email_address"
     type="email"
     placeholder="Email Address"
     name="reply_to"
     required
     class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
     aria-describedby="email-error"
   />
<div id="email-error" class="empty-feedback invalid-feedback text-red-500 text-sm mt-1" aria-live="assertive">
     <span class="empty-feedback">Please provide your email address.</span>
     <span class="invalid-feedback">Please provide a valid email address.</span>
   </div>
 </div>
 <div class="mb-3">
   <label for="message" class="sr-only">Your Message</label>
   <textarea
     id="message"
     name="message"
     required
     placeholder="Your Message"
     class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none h-36 focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
     aria-describedby="message-error"
   ></textarea>
<div id="message-error" class="empty-feedback invalid-feedback text-red-500 text-sm mt-1" aria-live="assertive">
     Please enter your message.
   </div>
 </div>
 
 <!-- Turnstile Widget -->
 <div class="mb-5">
   <div id="cf-turnstile" class="mb-3"></div>
 </div>

 <Button type="submit" size="lg" block>Send Message</Button>
 <div id="result" class="mt-3 text-center" role="alert" aria-live="polite"></div>
</form>

<style>
 .invalid-feedback,
 .empty-feedback {
   display: none;
 }
 .was-validated :placeholder-shown:invalid ~ .empty-feedback {
   display: block;
 }
 .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
   display: block;
 }
 .is-invalid,
 .was-validated :invalid {
   border-color: #dc3545;
 }
</style>

<!-- EmailJS SDK -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

<!-- Initialize EmailJS -->
<script is:inline define:vars={{ emailJsKey }}>
 (function() {
   try {
     emailjs.init(emailJsKey);
     console.log('EmailJS initialized successfully');
   } catch (error) {
     console.error('Failed to initialize EmailJS:', error);
   }
 })();
</script>

<!-- Turnstile -->
<script define:vars={{ turnstileKey }}>
  if (typeof window !== 'undefined') {
    window.onloadTurnstileCallback = function () {
      try {
        if (typeof turnstile !== 'undefined') {
          turnstile.render('#cf-turnstile', {
            sitekey: turnstileKey,
            callback: function(token) {
              console.log('Turnstile success:', token);
              window.turnstileToken = token;
            }
          });
        } else {
          console.warn('Turnstile not loaded. Captcha will not be available.');
        }
      } catch (error) {
        console.error('Error rendering Turnstile:', error);
      }
    };
  }
</script>

<script async
  src="https://challenges.cloudflare.com/turnstile/v0/api.js?onload=onloadTurnstileCallback">
</script>

<script is:inline define:vars={{ emailJsKey, emailJsServiceId, emailJsTemplateId }}>
 document.addEventListener('DOMContentLoaded', function() {
   try {
     let form = document.getElementById("form");
     let result = document.getElementById("result");

     if (!form || !result) {
       console.error('Form or result element not found');
       return;
     }

     form.addEventListener("submit", async function (e) {
       e.preventDefault();
       form.classList.add("was-validated");

       // Remove any existing error messages
       result.classList.remove("text-red-500", "text-green-500");
       result.innerHTML = "";

       if (!form.checkValidity()) {
         // Show the first validation error
         const firstInvalid = form.querySelectorAll(":invalid")[0];
         if (firstInvalid) {
           const invalidInput = firstInvalid.querySelector("input, textarea");
           if (invalidInput) invalidInput.focus();
           else firstInvalid.focus();
           
           // Show error message
           const errorDiv = firstInvalid.querySelector(".invalid-feedback, .empty-feedback");
           if (errorDiv) {
             errorDiv.style.display = "block";
           }
         }
         return;
       }

       // Check if turnstile is available
       if (typeof window.turnstileToken === 'undefined') {
         console.warn('Turnstile token not found. This might be due to Turnstile not loading properly.');
         // Continue anyway for build process
       } else if (!window.turnstileToken) {
         result.classList.add("text-red-500");
         result.innerHTML = "Please complete the captcha";
         return;
       }

       try {
         // Clear all error messages
         document.querySelectorAll(".invalid-feedback, .empty-feedback").forEach(el => {
           el.style.display = "none";
         });
         
         result.innerHTML = "Sending...";
         result.setAttribute("aria-busy", "true");

         // Check if EmailJS is available
         if (typeof emailjs === 'undefined') {
           throw new Error('EmailJS not loaded');
         }

         const templateParams = {
           from_name: form.from_name.value,
           reply_to: form.reply_to.value,
           message: form.message.value,
           'cf-turnstile-response': window.turnstileToken || 'not-available'
         };

         const response = await emailjs.send(
           emailJsServiceId,
           emailJsTemplateId,
           templateParams,
           emailJsKey
         );

         console.log('SUCCESS!', response.status, response.text);
         result.classList.remove("text-red-500");
         result.classList.add("text-green-500");
         result.innerHTML = "Message sent successfully!";
         
         // Reset form and captcha
         form.reset();
         form.classList.remove("was-validated");
         
         // Reset turnstile if available
         if (typeof turnstile !== 'undefined') {
           turnstile.reset();
         }
         window.turnstileToken = null;

         // Clear success message after 5 seconds
         setTimeout(() => {
           result.style.display = "none";
         }, 5000);
         
         // Remove aria-busy attribute
         result.removeAttribute("aria-busy");

       } catch(error) {
         console.error('FAILED...', error);
         result.classList.add("text-red-500");
         result.innerHTML = "Failed to send: " + (error.text || error.message || 'Unknown error');
         result.removeAttribute("aria-busy");
       }
     });
   } catch (error) {
     console.error('Error setting up form handler:', error);
   }
 });
</script>
