---
// src/pages/auth/callback.astro
import { supabase } from "../../utils/supabase";

// Get Supabase URL and anon key from environment variables with fallbacks
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL || 'https://nqdjdtmwydrpiswizvve.supabase.co';
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5xZGpkdG13eWRycGlzd2l6dnZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5MDI4NTUsImV4cCI6MjA2MTQ3ODg1NX0.GzTwcfBpBWhLwaKpRXNsyiUrKKLCq0hlx277ITAsIQc';

// Log a warning if we're using fallbacks
if (!import.meta.env.PUBLIC_SUPABASE_URL || !import.meta.env.PUBLIC_SUPABASE_ANON_KEY) {
  console.warn('Using fallback Supabase configuration. Please set PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY environment variables.');
}
---

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Authentication Callback</title>
  <style>
    body {
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f9fafb;
      color: #1f2937;
    }
    
    .container {
      text-align: center;
      padding: 2rem;
      border-radius: 0.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      background-color: white;
      max-width: 24rem;
    }
    
    .dark-mode .container {
      background-color: #1f2937;
      color: #f9fafb;
    }
    
    h1 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
    }
    
    p {
      margin-bottom: 1rem;
    }
    
    .spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      width: 36px;
      height: 36px;
      border-radius: 50%;
      border-left-color: #3b82f6;
      animation: spin 1s linear infinite;
      margin: 1rem auto;
    }
    
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
    
    .dark-mode .spinner {
      border-color: rgba(255, 255, 255, 0.1);
      border-left-color: #3b82f6;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Authentication</h1>
    <div class="spinner"></div>
    <p id="message">Processing your authentication...</p>
  </div>

  <script define:vars={{ supabaseUrl, supabaseAnonKey }}>
    // Check if dark mode is enabled
    if (localStorage.getItem('appTheme') === 'dark' || 
        (!('appTheme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.body.classList.add('dark-mode');
    }
    
    // Process the authentication and redirect
    async function handleAuthCallback() {
      const messageElement = document.getElementById('message');
      
      try {
        // Get stored language preference, default to 'fr'
        const locale = localStorage.getItem('auth_locale') || 'fr';
        
        // Get auth state
        const { data, error } = await window.supabaseClient.auth.getSession();
        
        if (error) throw error;
        
        if (data?.session) {
          // Authentication successful, redirect to secure area
          messageElement.textContent = 'Authentication successful! Redirecting...';
          window.location.href = `/${locale}/secure`;
        } else {
          // No session found, redirect to login
          messageElement.textContent = 'No session found. Redirecting to login...';
          setTimeout(() => {
            window.location.href = `/${locale}/auth/login`;
          }, 2000);
        }
      } catch (error) {
        console.error('Auth callback error:', error);
        messageElement.textContent = 'Authentication error. Redirecting to login...';
        
        // Redirect to login after a delay
        setTimeout(() => {
          const locale = localStorage.getItem('auth_locale') || 'fr';
          window.location.href = `/${locale}/auth/login`;
        }, 3000);
      }
    }
    
    // Initialize Supabase client when the page loads
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        // Log the environment variables (without exposing the full key)
        console.log('Supabase URL:', supabaseUrl);
        console.log('Supabase Key available:', !!supabaseAnonKey);
        
        if (!supabaseUrl || !supabaseAnonKey) {
          throw new Error('Supabase configuration is missing');
        }
        
        // Dynamically import the Supabase client
        const { createClient } = await import('https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm');
        console.log('Supabase client imported successfully');
        
        // Initialize the client with environment variables passed from the server
        const supabase = createClient(
          supabaseUrl,
          supabaseAnonKey
        );
        console.log('Supabase client initialized successfully');
        
        // Make supabase available to the handleAuthCallback function
        window.supabaseClient = supabase;
        
        // Handle the authentication
        handleAuthCallback();
      } catch (error) {
        console.error('Failed to initialize Supabase client:', error);
        document.getElementById('message').textContent =
          'Failed to initialize authentication client. Please try again.';
          
        // Add more detailed error information to the console
        if (error instanceof Error) {
          console.error('Error name:', error.name);
          console.error('Error message:', error.message);
          console.error('Error stack:', error.stack);
        }
      }
    });
  </script>
</body>
</html>