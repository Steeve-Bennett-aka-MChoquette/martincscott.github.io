---
import MainLayout from '../../layouts/MainLayout.astro';
import Link from "@components/ui/link.astro";
import { Icon } from "astro-icon/components";
import { getLocaleFromPath, loadTranslations } from "../../utils/i18n";
import supabase from '../../utils/supabase';

// Get locale from URL
const currentLocale = getLocaleFromPath(Astro.url.pathname);

// Define interface for auth translations with optional properties
interface AuthTranslations {
  forgotPassword?: string;
  resetPassword?: string;
  email?: string;
  enterEmail?: string;
  sendResetLink?: string;
  backToLogin?: string;
}

// Load translations using the proper i18n utility with error handling
let translations: { auth: AuthTranslations } = { auth: {} };
try {
  const loadedTranslations = await loadTranslations('auth', currentLocale);
  translations.auth = loadedTranslations as AuthTranslations;
  
  // Update the page title with translated value if available
  if (translations.auth.forgotPassword) {
    document.title = translations.auth.forgotPassword;
  }
} catch (error) {
  console.error('Failed to load translations:', error);
}

// Set default page title
export const title = 'Forgot Password';
---

<MainLayout title={title}>
  <div class="auth-container">
    <h1 class="text-2xl font-bold mb-6 text-gray-800 dark:text-white">{translations.auth.resetPassword || "Reset Password"}</h1>
    
    <form id="reset-form" class="space-y-4">
      <div class="form-group">
        <label for="email" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">{translations.auth.email || "Email"}</label>
        <input type="email" id="email" name="email" required 
          class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
        <p class="help-text text-sm mt-1 text-gray-500 dark:text-gray-400">{translations.auth.enterEmail || "Enter your registered email address to recover access"}</p>
      </div>
      
      <button type="submit" id="reset-button"
        class="w-full rounded text-center transition focus-visible:ring-2 ring-offset-2 ring-gray-200 dark:ring-gray-800 px-5 py-2.5 bg-black text-white hover:bg-gray-800 border-2 border-transparent dark:bg-white dark:text-black dark:hover:bg-gray-200 flex items-center justify-center">
        <span>{translations.auth.sendResetLink || "Send Reset Link"}</span>
      </button>
      
      <p class="auth-link text-gray-700 dark:text-gray-300 text-center text-sm">
        <a href="/auth/login" class="text-blue-500 hover:underline dark:text-blue-400">{translations.auth.backToLogin || "Back to login"}</a>
      </p>
    </form>
  </div>

  <script>
    // This script runs in the browser
    import supabase from '../../utils/supabase';
    
    // Handle password reset request
    document.getElementById('reset-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const emailInput = document.getElementById('email') as HTMLInputElement;
      const email = emailInput.value.trim();
      const resetButton = document.getElementById('reset-button') as HTMLButtonElement;
      
      // Input validation
      if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        alert('Please enter a valid email address.');
        return;
      }
      
      // Show loading state
      resetButton.disabled = true;
      const originalText = resetButton.innerHTML;
      resetButton.innerHTML = 'Sending...';
      
      try {
        const { error } = await supabase.auth.resetPasswordForEmail(email, {
          redirectTo: `${window.location.origin}/auth/login`
        });
        
        if (error) throw error;
        
        // Show success message
        alert('Check your email for the password reset link!');
      } catch (error) {
        console.error('Error sending reset email:', error);
        alert('An unexpected error occurred. Please try again later.');
      } finally {
        // Restore button state
        resetButton.disabled = false;
        resetButton.innerHTML = originalText;
      }
    });
  </script>

  <style>
    .auth-container {
      @apply max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md;
    }
    .form-group {
      @apply mb-4;
    }
    label {
      @apply block mb-2 text-sm font-medium;
    }
    input {
      @apply w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white;
    }
    .help-text {
      @apply mt-1 text-sm text-gray-500 dark:text-gray-400;
    }
    .auth-link {
      @apply mt-4 text-center text-sm;
    }
  </style>
</MainLayout>
